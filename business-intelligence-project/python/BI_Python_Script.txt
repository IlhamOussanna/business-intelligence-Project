# -*- coding: utf-8 -*-
"""
Created on Wed Apr  9 16:41:30 2025

@author: sanjena.bhutani
"""

import pandas as pd
import numpy as np
import os

# Define file paths
base_path = "C:/Users/sanjena.bhutani/Downloads"
stock_path = os.path.join(base_path, "all_stocks_5yr.csv")
company_path = os.path.join(base_path, "cleaned_nasdaq_screener.xlsx")
macro_path = os.path.join(base_path, "macroeconomic_data.csv")  # rename if needed

# ==============================
# 1️⃣ STOCK PRICE FACT TABLE
# ==============================

# Load daily stock data
df_stock = pd.read_csv(stock_path)

# Convert date to datetime and extract year/month
df_stock['date'] = pd.to_datetime(df_stock['date'])
df_stock['year'] = df_stock['date'].dt.year
df_stock['month'] = df_stock['date'].dt.month

# Ensure numeric columns
numeric_cols = ['open', 'high', 'low', 'close', 'volume']
df_stock[numeric_cols] = df_stock[numeric_cols].apply(pd.to_numeric)

# Sort for monthly return calculation
df_stock.sort_values(by=['Name', 'date'], inplace=True)

# Group by ticker + year + month
monthly = df_stock.groupby(['Name', 'year', 'month']).agg(
    month_end_close=('close', 'last'),
    monthly_high=('high', 'max'),
    monthly_low=('low', 'min'),
    total_volume=('volume', 'sum')
).reset_index()

# Calculate monthly return
monthly['prev_close'] = monthly.groupby('Name')['month_end_close'].shift(1)
monthly['monthly_return'] = ((monthly['month_end_close'] - monthly['prev_close']) / monthly['prev_close']) * 100
monthly.drop(columns='prev_close', inplace=True)

# Create DateKey in YYYYMM format
monthly['DateKey'] = monthly['year'].astype(str) + monthly['month'].apply(lambda x: f"{x:02}")
monthly['DateKey'] = monthly['DateKey'].astype(int)

# Rename for clarity
fact_stock = monthly.rename(columns={'Name': 'Ticker'})

# Final columns
fact_stock = fact_stock[['Ticker', 'DateKey', 'month_end_close', 'monthly_high', 'monthly_low', 'total_volume', 'monthly_return']]

# Save to CSV
fact_stock.to_csv(os.path.join(base_path, "FactStockMonthly.csv"), index=False)
print("✅ Saved: FactStockMonthly.csv")

# ==============================
# 2️⃣ COMPANY DIMENSION TABLE
# ==============================

# Load company metadata
df_company = pd.read_excel(company_path)

# Keep only companies present in stock data
tickers_in_stock = fact_stock['Ticker'].unique()
df_company = df_company[df_company['Symbol'].isin(tickers_in_stock)].copy()

# Clean up column names
df_company.rename(columns={
    'Symbol': 'Ticker',
    'Name': 'CompanyName',
    'Sector': 'Sector',
    'Industry': 'Industry',
    'Country': 'Country',
    'IPO Year': 'IPO_Year'
}, inplace=True)

# Fill missing values
df_company['Country'] = df_company['Country'].fillna("Unknown")
df_company['IPO_Year'] = df_company['IPO_Year'].fillna(0).astype(int)

# Assign surrogate CompanyKey
df_company = df_company.reset_index(drop=True)
df_company['CompanyKey'] = df_company.index + 1  # start at 1

# Reorder columns
dim_company = df_company[['CompanyKey', 'Ticker', 'CompanyName', 'Sector', 'Industry', 'Country', 'IPO_Year']]

# Save to CSV
dim_company.to_csv(os.path.join(base_path, "DimCompany.csv"), index=False)
print("✅ Saved: DimCompany.csv")

# ==============================
# 3️⃣ DATE + MACRO DIMENSION TABLE
# ==============================

import pandas as pd
import numpy as np
import os

# Paths
base_path = "C:/Users/sanjena.bhutani/Downloads"
macro_path = os.path.join(base_path, "macroeconomic_data.csv")
fact_path = os.path.join(base_path, "FactStockMonthly.csv")

# 1. Load macroeconomic data (no date column)
df_macro = pd.read_csv(macro_path)

# 2. Generate a monthly date range (start Jan 2013)
date_range = pd.date_range(start="2013-01-01", periods=len(df_macro), freq='MS')  # 'MS' = Month Start
df_macro['date'] = date_range
df_macro['year'] = df_macro['date'].dt.year
df_macro['month'] = df_macro['date'].dt.month

# 3. Rename columns for consistency
df_macro.rename(columns={
    'Interest Rate (%)': 'interest_rate',
    'Inflation Rate (%)': 'inflation_rate',
    'GDP Growth (%)': 'gdp_growth'
}, inplace=True)

# 4. Create DateKey in YYYYMM format
df_macro['DateKey'] = df_macro['year'].astype(str) + df_macro['month'].apply(lambda x: f"{x:02}")
df_macro['DateKey'] = df_macro['DateKey'].astype(int)

# 5. Trim to only needed columns
df_macro = df_macro[['DateKey', 'year', 'month', 'interest_rate', 'inflation_rate', 'gdp_growth']]

# 6. Load DateKeys from fact table to create date dimension
df_fact = pd.read_csv(fact_path)
df_dates = df_fact[['DateKey']].drop_duplicates()
df_dates['year'] = df_dates['DateKey'].astype(str).str[:4].astype(int)
df_dates['month'] = df_dates['DateKey'].astype(str).str[4:].astype(int)

# 7. Merge macro with Date dimension
dim_date = pd.merge(df_dates, df_macro, on=['DateKey', 'year', 'month'], how='left')

# 8. Add calendar labels
dim_date['MonthName'] = pd.to_datetime(dim_date['year'].astype(str) + '-' + dim_date['month'].astype(str) + '-01').dt.strftime('%B')
dim_date['Quarter'] = pd.to_datetime(dim_date['year'].astype(str) + '-' + dim_date['month'].astype(str) + '-01').dt.quarter
dim_date['YearMonthLabel'] = dim_date['year'].astype(str) + '-' + dim_date['month'].apply(lambda x: f"{x:02}")

# 9. Final column order
dim_date = dim_date[['DateKey', 'year', 'month', 'MonthName', 'Quarter', 'YearMonthLabel',
                     'interest_rate', 'inflation_rate', 'gdp_growth']]

# 10. Save to CSV
dim_date.to_csv(os.path.join(base_path, "DimDate.csv"), index=False)
print("✅ Saved: DimDate.csv with macroeconomic overlays.")
